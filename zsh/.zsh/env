setopt no_global_rcs

export MANPATH="/usr/local/share/man:/usr/X11/man:/usr/share/man"

export LANG="en_US.UTF-8"
export LC_COLLATE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_MUSSAGUS="en_US.UTF-8"
export LC_MONETARY="en_US.UTF-8"
export LC_NUMERIC="en_US.UTF-8"
export LC_TIME="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

export EDITOR=vi
export CLICOLOR=1
export TERM=screen-256color
export LSCOLORS=Gxfxcxdxhxegedahagacgx
#export PATH=/usr/local/bin:/usr/local/sbin:$HOME/local/bin:$HOME/bin:$PATH
export PATH=/usr/local/sbin:$HOME/local/bin:$HOME/bin:$PATH

export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share
export GPG_TTY=$(tty)

export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

case ${OSTYPE} in
  darwin*)
    [ -x /opt/homebrew/bin/brew ] && eval $(/opt/homebrew/bin/brew shellenv)
    #export SSL_CERT_FILE=/usr/local/opt/curl-ca-bundle/share/ca-bundle.crt
    # Homebrew Cask
    export HOMEBREW_CASK_PREFIX="$(brew --prefix)/Caskroom"

    # openssl
    export PATH=/usr/local/opt/openssl/bin:$PATH
    export LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:$LD_LIBRARY_PATH
    export CPATH=/usr/local/opt/openssl/include:$LD_LIBRARY_PATH

    export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH
    export PATH=/usr/local/opt/gnu-sed/libexec/gnubin:$PATH
    export PATH=/usr/local/opt/grep/libexec/gnubin:$PATH

    #export DEVELOPER_DIR=$(xcode-select -p)
    # Xcode6 symbolicate
    #export PATH="$DEVELOPER_DIR/../SharedFrameworks/DTDeviceKitBase.framework/Versions/A/Resources:$PATH"
    # Pq
    export PQ_ROOT=$(brew --prefix libpq)
    export PATH=$PQ_ROOT/bin:$PATH

    export TFENV_ARCH=amd64
    ;;
  linux*)
    export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
    export NO_AT_BRIDGE=1 # naulitulus

    if [[ -s /home/linuxbrew/.linuxbrew ]]; then
      export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
      export LD_LIBRARY_PATH="/home/liunxbrew/.linuxbrew/lib:$LD_LIBRARY_PATH"
    fi

    if [[ -s $HOME/.tfenv ]]; then
      export PATH="$PATH:$HOME/.tfenv/bin"
    fi

    if [[ -s /usr/local/cuda ]]; then
      # CUDA Toolkit
      export CUDA_HOME=/usr/local/cuda
      export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
      export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
      export CPATH=/usr/local/cuda/include:$CPATH
      # cuDNN
      export LIBRARY_PATH=/usr/local/cuda/lib64:$LIBRARY_PATH
    fi

    ;;
esac

# Git
if (( $+commands[git] )); then
  case ${OSTYPE} in
    darwin*)
      export GIT_ROOT=$(brew --prefix git)
      export PATH="$GIT_ROOT/share/git-core/contrib/diff-highlight:$PATH"
      ;;
    linux*)
      export GIT_ROOT=/usr/lib/git
      export PATH="/usr/share/doc/git/contrib/diff-highlight:$PATH"
      ;;
  esac
fi

# export VIRTUALBOX_BOOT2DOCKER_URL=https://github.com/boot2docker/boot2docker/releases/download/v1.4.1/boot2docker.iso
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1
# export DOCKER_DEFAULT_PLATFORM=linux/arm64/v8
# export DOCKER_DEFAULT_PLATFORM=linux/amd64

###
if (( $+commands[fzf] )) && (( $+commands[rg] )); then
  export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_DEFAULT_OPTS='--color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108 --color info:108,prompt:109,spinner:108,pointer:168,marker:168 --height 40% --reverse --border'
fi

if (( $+commands[navi] )); then
  export NAVI_PATH="$(navi info cheats-path)"
  export NAVI_PATH="$XDG_CONFIG_HOME/navi/cheats:.cheats:$NAVI_PATH"
fi

###

# GoogleCloudSDK
if [[ -s $HOMEBREW_CASK_PREFIX/google-cloud-sdk ]]; then
  export PATH="$HOMEBREW_CASK_PREFIX/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc:$PATH"
fi

# Pulumi
if [[ -s $HOME/.pulumi ]]; then
  export PATH="$HOME/.pulumi/bin:$PATH"
fi

### Languages
# Haskell
if [[ -s $HOME/.ghcup ]]; then
  source $HOME/.ghcup/env
fi

# Rust
if [[ -s $HOME/.cargo/env ]]; then
  export PATH="$HOME/.cargo/bin:$PATH"
  . "$HOME/.cargo/env"
fi

# tfenv
if [[ -s $HOME/.tfenv ]]; then
  export TFENV_ROOT="$HOME/.tfenv"
  export PATH="$TFENV/bin:$PATH"
fi

# Ruby
if [[ -s $HOME/.rbenv ]]; then
  export RBENV_ROOT="$HOME/.rbenv"
  #export PATH="$RBENV_ROOT/bin:$PATH"
  export PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"
fi

export BUNDLER_EDITOR="vim +VimFiler"
#export GEM_HOME=$HOME/.gem
#export GEM_PATH=$HOME/.gem
#export PATH="$GEM_HOME/bin:$PATH"

# Python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init --path)"
fi

if [ -d '/usr/local/miniconda3' ]; then
  export MINICONDA_ROOT="/usr/local/miniconda3"
  export PATH="$MINICONDA_ROOT/bin:$PATH"
fi

# Node
export NODENV_ROOT="$HOME/.nodenv"
export PATH="$NODENV_ROOT/bin:$PATH"
if (( $+commands[nodenv] )); then
  eval "$(nodenv init -)"
fi

# Golang
if (( $+commands[go] )); then
  case ${OSTYPE} in
    darwin*)
      export GOROOT=$(brew --prefix go)/libexec
      ;;
    linux*)
      export GOROOT=/usr/lib/go
      ;;
  esac
  export GOPATH=$HOME
  export GOBIN=$HOME/bin
  export PATH=$HOME/bin:$GOROOT/bin:$PATH
fi
export GO111MODULE=on
export GODEBUG=asyncpreemptoff=1


# amplify
if [[ -s $HOME/.amplify ]]; then
  export PATH="$HOME/.amplify/bin:$PATH"
fi
